// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  ASSIGNED
  COMPLETED
  FAILED
}

enum TaskType {
  TASK
  CHECKPOINT
  ROUTE
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id            String         @id @default(uuid())
  clerk_id      String         @unique
  email         String         @unique
  username      String         @unique
  photo         String
  name          String
  planId        Float          @default(1)
  creditBalance Float          @default(10)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tasks         Task[]
  role          Role           @default(SUBACCOUNT_USER)
  agencyId      String?
  Agency        Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  permissions   Permission[]
  notifications Notification[]

  @@index([agencyId])
}

model Permission {
  id           String     @id @default(uuid())
  email        String
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subaccountId String
  Subaccount   Subaccount @relation(fields: [subaccountId], references: [id], onDelete: Cascade)
  access       Boolean

  @@index([subaccountId])
  @@index([email])
}

model Agency {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  customerId       String                @default("")
  name             String
  agencyLogo       String                @db.Text
  companyEmail     String
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  subaccounts      Subaccount[]
  sidebarOptions   AgencySidebarOption[]
  invitations      Invitation[]
  notifications    Notification[]
  // Subscription     Subscription?
}

model Subaccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("")
  name             String
  subAccountLogo   String                    @db.Text
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  sidebarOptions   SubaccountSidebarOption[]
  permissions      Permission[]
  contacts         Contact[]
  notifications    Notification[]

  @@index([agencyId])
}

model Contact {
  id           String   @id @default(cuid())
  name         String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subaccountId String

  Subaccount Subaccount @relation(fields: [subaccountId], references: [id], onDelete: Cascade)
  // Ticket     Ticket[]

  @@index([subaccountId])
}

model AgencySidebarOption {
  id        String   @id @default(cuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model SubaccountSidebarOption {
  id           String      @id @default(cuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Subaccount   Subaccount? @relation(fields: [subaccountId], references: [id], onDelete: Cascade)
  subaccountId String?

  @@index([subaccountId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id       String           @id @default(cuid())
  email    String           @unique
  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id           String  @id @default(cuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Subaccount Subaccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model Tracker {
  id   String @id @default(cuid())
  Task Task[]
}

model Tag {
  id String @id @default(cuid())

  Task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model Task {
  id              String     @id @default(cuid())
  userId          String?
  user            User?      @relation(fields: [userId], references: [id])
  trackerId       String?
  tracker         Tracker?   @relation(fields: [trackerId], references: [id])
  label           String
  description     String     @db.Text
  latitude        Float
  longitude       Float
  address         String
  radius          Int
  createdAt       DateTime   @default(now())
  from            DateTime
  to              DateTime
  externalId      String?
  status          TaskStatus @default(PENDING)
  updatedAt       DateTime   @updatedAt
  maxDelay        Int?       @default(0)
  minStayDuration Int?       @default(0)
  arrivedAt       DateTime
  stayDuration    Int?
  tag             Tag[]
  type            TaskType   @default(TASK)
  // WIP: 'Form' field design
  // form 
}
